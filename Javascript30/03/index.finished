<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>JS Reference VS Copy</title>
  <link rel="icon" href="https://fav.farm/ðŸ”¥" />
</head>
<body>

  <script>
    // start with strings, numbers and booleans
    let age =20;
    let age2 = age;
    console.log(age, age2);

    age = 100;

    console.log(age, age2);

    // similarly check this for string as well

 let name="xyz";
 let name2=name;
 console.log(name,name2);
 name= "abc";
 console.log(name,name2);

 let check=true;
 let check1=check;
 console.log(check,check1);
 check=false;
 console.log(check,check1);


    // Let's say we have an array
    const players = ['Wes', 'Sarah', 'Ryan', 'Poppy'];

    // and we want to make a copy of it.

    // You might think we can just do something like this:

    // however what happens when we update that array?

    // now here is the problem!

    // oh no - we have edited the original array too!

    // Why? It's because that is an array reference, not an array copy. They both point to the same array!

    // So, how do we fix this? We take a copy instead!

    // one way 
    const copy= players.map((player) => player);

    // or create a new array and concat the old one in
    const copy=[].concat(players);

    // or use the new ES6 Spread
     const copy=[...players];
    // now when we update it, the original one isn't changed

    // The same thing goes for objects, let's say we have a person object

    // with Objects
    const person = {
      name: 'Wes Bos',
      age: 80
    };

    // and think we make a copy:


    // how do we take a copy instead?

    // We will hopefully soon see the object ...spread

    // Things to note - this is only 1 level deep - both for Arrays and Objects. lodash has a cloneDeep method, but you should think twice before using it.
const copyobj={...person};
  </script>

</body>
</html>
